# Training Data - Data file is imported by Text(base) to convert strings into factors
Salary_train <- read.csv(file.choose())
View(Salary_train)
# Training Data - Data file is imported by Text(base) to convert strings into factors
Salary_train <- read.csv(file.choose())
View(Salary_train)
str(Salary_train)
attach(Salary_train)
# Test Data - Data file is imported by Text(base) to convert strings into factors
Salary_test <- read.csv(file.choose())
str(Salary_test)
attach(Salary_test)
summary(Salary_train)
summary(Salary_test)
# Graphical Visualization
library(ggplot2)
plot(workclass,Salary, main = "Workclass")
Salary_train <- read.csv("D:/Module 17/SalaryData_Train.csv", stringsAsFactors=TRUE)
View(Salary_train)
Salary_test <- read.csv("D:/Module 17/SalaryData_Test.csv", stringsAsFactors=TRUE)
View(Salary_test)
str(Salary_train)
attach(Salary_train)
str(Salary_test)
attach(Salary_test)
summary(Salary_train)
summary(Salary_test)
plot(workclass,Salary, main = "Workclass")
plot(education,Salary, main = "Education")
plot(occupation,Salary, main = "Occupation")
plot(relationship,Salary, main = "Relationship")
library(ggplot2)
ggplot(data= Salary_train,aes(x=Salary, y = age, fill = Salary)) +
geom_boxplot() + ggtitle("Box Plot")
ggplot(data=Salary_train,aes(x=Salary, y = hoursperweek, fill = Salary)) +
geom_boxplot() +
ggtitle("Box Plot")
ggplot(data=Salary_train,aes(x = age, fill = Salary)) +
geom_density(alpha = 0.9, color = 'Violet')
ggplot(data=Salary_train,aes(x = workclass, fill = Salary)) +
geom_density(alpha = 0.9, color = 'Violet')
ggplot(data=Salary_train,aes(x = education, fill = Salary)) +
geom_density(alpha = 0.9, color = 'Violet')
ggplot(data=Salary_train,aes(x = educationno, fill = Salary)) +
geom_density(alpha = 0.9, color = 'Violet')
# Training a model on the data ----
# Begin by training a simple linear SVM
install.packages("kernlab")
library(kernlab)
Salary_classifier <- ksvm(Salary ~ ., data = Salary_train, kernel = "vanilladot")
Salary_predictions <- predict(Salary_classifier, Salary_test)
table(Salary_predictions, Salary_test$Salary)
agreement <- Salary_predictions == Salary_test$Salary
table(agreement)
prop.table(table(agreement))
Salary_classifier_rbf <- ksvm(Salary ~ ., data = Salary_train, kernel = "rbfdot")
Salary_predictions_rbf <- predict(Salary_classifier_rbf, Salary_test)
Salary_predictions_rbf <- predict(Salary_classifier_rbf, Salary_test)
agreement_rbf <- Salary_predictions_rbf == Salary_test$Salary
agreement_rbf <- Salary_predictions_rbf == Salary_test$Salary
table(agreement_rbf)
prop.table(table(agreement_rbf))
# Load the Dataset
Forest <- read.csv(file.choose())
# Load the Dataset
Forest <- read.csv(file.choose())
# Removing unnecessary columns
Forest <- Forest[3:30]
View(Forest)
str(Forest)
summary(Forest)
attach(Forest)
hist(FFMC,col = "yellow", main = "FFMC" )
hist(DMC,col = "blue", main = "DMC")
hist(DC,col = "orange", main = "DC")
hist(temp,col = "red", main = "Temp")
# correlation matrix
cor(Forest)
normalise <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
Forest$temp <- normalise(Forest$temp)
Forest$rain <- normalise(Forest$rain)
Forest$RH <- normalise(Forest$RH)
Forest$wind <- normalise(Forest$wind)
# Converting area into Categorical
sum(Forest$area < 5)
sum(Forest$area >= 5)
Forest$size <- NULL
Forest$size <- factor(ifelse(Forest$area < 5, 1, 0),
labels = c("small", "large"))
# Training a model on the data
train <- sample(x = nrow(Forest), size = 400, replace = FALSE)
# Building the model using Polynomial Kernel
model1 <- ksvm(size ~ temp + RH + wind + rain,
data = Forest[train, ],
kernel = "polydot", C = 1)
model1   # Training Error = 0.2825
# Building the model using Rbfdot Kernel
model2 <- ksvm(size ~ temp + RH + wind + rain,
data = Forest[train, ],
kernel = "rbfdot", C = 1)
model2   #Training error = 0.255
# Building the model using tanhdot Kernel
model3 <- ksvm(size ~ temp + RH + wind + rain,
data = Forest[train, ],
kernel = "tanhdot", C = 1)
model3   #Training error = 0.4475
pred <- predict(model2, newdata = Forest[-train, ], type = "response")
table(pred, Forest[-train, "size"])
library(caret)
install.packages("e1071")
confusionMatrix(table(pred, Forest[-train, "size"]), positive = "small")
